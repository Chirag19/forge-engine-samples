<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MessageSwitchToDefaultViewFail" xml:space="preserve">
    <value>自动切换到默认视图...失败!!!</value>
  </data>
  <data name="MessageSwitchToDefaultViewStart" xml:space="preserve">
    <value>自动切换到默认视图...</value>
  </data>
  <data name="MessageSwitchToDefaultViewSuccess" xml:space="preserve">
    <value>自动切换到默认视图...成功!</value>
  </data>
  <data name="ToolTextExportToSvfzip" xml:space="preserve">
    <value>导出为 SVFZIP</value>
  </data>
  <data name="ToolTipExportToSvfzip" xml:space="preserve">
    <value>将当前三维视图显示的模型导出为 SVFZIP 轻量化格式。</value>
  </data>
  <data name="MessageLoadExportRoutine" xml:space="preserve">
    <value>自动启动导出插件...</value>
  </data>
  <data name="MessageLoadExportRoutineFail" xml:space="preserve">
    <value>自动启动导出插件...失败!!!</value>
  </data>
  <data name="MessageLoadExportRoutineSuccess" xml:space="preserve">
    <value>自动启动导出插件...成功!</value>
  </data>
  <data name="MessageCanNotFind3DView" xml:space="preserve">
    <value>无法找到待转换的 3D 视图!</value>
  </data>
  <data name="MessageCanNotFindTargetPath" xml:space="preserve">
    <value>无法获取输出文件位置!</value>
  </data>
  <data name="MessageExportFinishCancel" xml:space="preserve">
    <value>转换输出结束...取消 {0}</value>
  </data>
  <data name="MessageExportFinishFail" xml:space="preserve">
    <value>转换输出结束...失败 {0}</value>
  </data>
  <data name="MessageLicenseAlphaMode" xml:space="preserve">
    <value>Alpha 测试模式</value>
  </data>
  <data name="MessageLicenseBetaMode" xml:space="preserve">
    <value>Beta 测试模式</value>
  </data>
  <data name="MessageLicenseExpireBy" xml:space="preserve">
    <value>有效期至 {0:yyyy-MM-dd}</value>
  </data>
  <data name="MessageLicenseFreeEdition" xml:space="preserve">
    <value>免费授权</value>
  </data>
  <data name="MessageLicenseInvalid" xml:space="preserve">
    <value>授权无效!</value>
  </data>
  <data name="MessageLicenseInvalidOrExpired" xml:space="preserve">
    <value>无授权信息或授权已过期!</value>
  </data>
  <data name="MessageLicenseTrialByDays" xml:space="preserve">
    <value>共可用 {0} 天, 已用 {1} 天, 剩余 {2} 天</value>
  </data>
  <data name="MessageLicenseTrialByMinutes" xml:space="preserve">
    <value>共可用 {0} 分钟, 已用 {1} 分钟, 剩余 {2} 分钟</value>
  </data>
  <data name="MessageLicenseTrialByTimes" xml:space="preserve">
    <value>共可用 {0} 次, 已用 {1} 次, 剩余 {2} 次</value>
  </data>
  <data name="MessageLicenseTrialEdition" xml:space="preserve">
    <value>试用授权</value>
  </data>
  <data name="MessageOpen3DViewFirst" xml:space="preserve">
    <value>请先切换至 3D 视图!</value>
  </data>
  <data name="tFinishSuccess" xml:space="preserve">
    <value>转换输出结束...成功</value>
  </data>
  <data name="DialogFilterAllFile" xml:space="preserve">
    <value>所有文件|*.*</value>
  </data>
  <data name="DialogFilterLicenseFile" xml:space="preserve">
    <value>授权文件|*.lic</value>
  </data>
  <data name="DialogFilterSvfzip" xml:space="preserve">
    <value>轻量化模型文件|*.svfzip</value>
  </data>
  <data name="DialogTitleLoadLicense" xml:space="preserve">
    <value>加载试用授权文件</value>
  </data>
  <data name="DialogTitleSelectTarget" xml:space="preserve">
    <value>输出文件到</value>
  </data>
  <data name="FeatureDescriptionExcludeLines" xml:space="preserve">
    <value>不导出线状几何实体, 可提高导出及浏览性能。</value>
  </data>
  <data name="FeatureDescriptionExcludePoints" xml:space="preserve">
    <value>不导出点状几何实体, 可提高导出及浏览性能。</value>
  </data>
  <data name="FeatureDescriptionExcludeProperties" xml:space="preserve">
    <value>适用于不关心构件属性的场景, 可提高导出及浏览性能。</value>
  </data>
  <data name="FeatureDescriptionExcludeTexture" xml:space="preserve">
    <value>适用于对构件美观度要求不高的场景, 可提高导出及浏览性能。</value>
  </data>
  <data name="FeatureDescriptionExportGrids" xml:space="preserve">
    <value>在输出的模型上叠加轴网信息。</value>
  </data>
  <data name="FeatureDescriptionExportRooms" xml:space="preserve">
    <value>在输出的模型上叠加房间信息。</value>
  </data>
  <data name="FeatureDescriptionGenerateElementData" xml:space="preserve">
    <value>用于定制开发, 文件名 elements_[data|props].json。</value>
  </data>
  <data name="FeatureDescriptionOnlySelected" xml:space="preserve">
    <value>适用于只关注视图中部分构件的场景。</value>
  </data>
  <data name="FeatureDescriptionUseLevelCategory" xml:space="preserve">
    <value>适用于需要分楼层管理的模型。</value>
  </data>
  <data name="FeatureNameExcludeLines" xml:space="preserve">
    <value>不输出模型线</value>
  </data>
  <data name="FeatureNameExcludePoints" xml:space="preserve">
    <value>不输出模型点</value>
  </data>
  <data name="FeatureNameExcludeProperties" xml:space="preserve">
    <value>不输出属性信息</value>
  </data>
  <data name="FeatureNameExcludeTexture" xml:space="preserve">
    <value>不输出纹理图片</value>
  </data>
  <data name="FeatureNameExportGrids" xml:space="preserve">
    <value>导出轴网</value>
  </data>
  <data name="FeatureNameExportRooms" xml:space="preserve">
    <value>导出房间</value>
  </data>
  <data name="FeatureNameGenerateElementData" xml:space="preserve">
    <value>导出构件关联数据</value>
  </data>
  <data name="FeatureNameOnlySelected" xml:space="preserve">
    <value>只导出选中的构件</value>
  </data>
  <data name="FeatureNameUseLevelCategory" xml:space="preserve">
    <value>模型树按标高分组</value>
  </data>
  <data name="MessageExporting" xml:space="preserve">
    <value>正在执行轻量化转换...</value>
  </data>
  <data name="MessageExportSuccess" xml:space="preserve">
    <value>轻量化文件转换成功!(耗时: {0})</value>
  </data>
  <data name="MessageFileSaveFailure" xml:space="preserve">
    <value>文件保存失败: {0}</value>
  </data>
  <data name="MessageNoAssociatedApplications" xml:space="preserve">
    <value>未安装关联应用程序</value>
  </data>
  <data name="MessageOperationFailureAndElapsedTime" xml:space="preserve">
    <value>操作失败, 总耗时: {0}</value>
  </data>
  <data name="MessageOperationFailureAndTryLater" xml:space="preserve">
    <value>程序发生内部错误, 请稍后重试!</value>
  </data>
  <data name="MessageOperationSuccessAndElapsedTime" xml:space="preserve">
    <value>操作成功, 总耗时: {0}</value>
  </data>
  <data name="MessageSelectOutputPathFirst" xml:space="preserve">
    <value>请先选择输出路径!</value>
  </data>
  <data name="FeatureNameConsolidateGroup" xml:space="preserve">
    <value>融合模型组</value>
    <comment>融合模型组</comment>
  </data>
  <data name="FeatureDescriptionConsolidateGroup" xml:space="preserve">
    <value>将每个模型组中的构件融合为一个构件</value>
    <comment>将每个模型组中的构件融合为一个构件</comment>
  </data>
  <data name="FeatureNameWireframe" xml:space="preserve">
    <value>线框模式</value>
    <comment>线框模式</comment>
  </data>
  <data name="FeatureDescriptionWireframe" xml:space="preserve">
    <value>使用线框表达三维几何实体</value>
    <comment>使用线框表达三维几何实体</comment>
  </data>
</root>